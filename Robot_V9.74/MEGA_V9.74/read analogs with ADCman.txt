In MEGA_V9.xx.ino file
In Defines section
	//******************* added by JDP *************************************************************************
	// this defines the pins that will be used to collect data using ADCman rather than the Nano
		#define Battery_Amps A11 	// Charge Amps
		#define Battery_Volts A12 	// Battery Volts
		#define Wheel_Amps A13		// Wheel Amps
		#define Rain_Sensor A14		//{Rain Sensor
	//**********************************************************************************************************

In "SETUP OF MOWER" section
//******************* added by JDP ************************************************************************* 
bool Use_NANO					  = 0;							// Use the Nano for battery info, rain and wheel amps
bool Use_MEGA_for_Analog_reads    = 1;							// Use the MEGA for battery info, rain and wheel amps
//**********************************************************************************************************

In void setup section - nothing else because setup already call ADCman setup
//******************* added by JDP ************************************************************************* 
if (Use_NANO == 1) Serial1.begin(57600);	//JDP added if								                  // Open Serial port 1 for the nano communication
if (Use_NANO == 1) SerialCom1.begin ();	//JDP added if
//**********************************************************************************************************

In void Loop section
//******************* added by JDP ************************************************************************* 
if (Use_NANO == 1)		Read_Serial1_Nano();       // Read the Serial data from the nano
if (Use_MEGA_for_Analog_reads == 1)  Read_Bat_Rain_Wheel(); //{ Read Battery volts, amps, Rain sensor, and Wheel Amps Directly with MEGA
//********************************************************************************

In Apply_Setup.ino file
void Setup_ADCMan() {
	Serial.println(F("Setting up ADCMAN"));
	
	if (Perimeter_Wire_Enabled == 1) {
		// Wire Sensor
		Serial.println(F("Setting up Wire Sensor"));
		ADCMan.init(); 
		ADCMan.setCapture(pinPerimeterLeft, 1, 0);
		perimeter.setPins(pinPerimeterLeft, pinPerimeterRight);
		//   perimeter.useDifferentialPerimeterSignal = true;   //using new Perimeter files JDP
		perimeter.speedTest(); 
	}
	
	if (GPS_Enabled == 1) {
		// GPS Fence Sensor 
		Serial.println(F("Setting up GPS Fence Sensor"));
		pinMode(GPS_Fence_Signal_Pin, INPUT);
		pinMode(GPS_Lock_Pin, INPUT);
		ADCMan.init(); 
		ADCMan.setCapture(GPS_Fence_Signal_Pin, 1, 1);
		ADCMan.setCapture(GPS_Lock_Pin, 1, 1);
	}
	
	//**********************added by JDP ************************************************************
	if (Use_MEGA_for_Analog_reads == 1) {
		// Use Mega for all Analog sensors
		Serial.println(F("Setting up Bat A, Bat V, Rain, Wheel Sensor"));
    pinMode(Battery_Amps, INPUT);
		pinMode(Battery_Volts, INPUT);
		pinMode(Wheel_Amps, INPUT);
		pinMode(Rain_Sensor, INPUT);
		ADCMan.init();
		ADCMan.setCapture(Battery_Amps, 1, 1);
		ADCMan.setCapture(Battery_Volts, 1, 0);
		ADCMan.setCapture(Wheel_Amps, 1, 1);
		ADCMan.setCapture(Rain_Sensor, 1, 1);
	}
	// if you do run the calibrate below, make sure loop is off, no charging, no rain, and disconect volt sensor
    //ADCMan.calibrate();  //run this once then comment out    
	ADCMan.run();
}

New File MEGa_Read_Analogs.INO
// MEGa_Read_Analogs.INO
// This File should act just like TXRX_NANO.ino
// It should set the same Variables that TXRX_NANO.ino does
// It will call Calculate_Volt_Amp_Charge at the end just like TXRX_NANO.ino

// These Pins are read by the adcman feature as analog.read can't be used anymore.

void Read_Bat_Rain_Wheel() {

// Run the ADCman to get the pin values as per the settings
	ADCMan.run();
      RawValueAmp = ADCMan.read(Battery_Amps);                              // 
	  RawValueVolt = ADCMan.read(Battery_Volts);                            //  
      Rain_Detected = ADCMan.read(Rain_Sensor);                             // 
      RawWheelAmp = ADCMan.read(Wheel_Amps);                                // 

  //Serial.print(F("WAMpRaw: "));
  //Serial.print(RawWheelAmp);
  //Serial.print(F(" |"));

Calculate_Volt_Amp_Charge();

}

In AmpsVolts.ino file  maybe have to tweak these, I did because I am using 24V battery

// Calculate Amps from NANO RX Data
	int mVperAmp = 185;
	int ACSoffset = 2500; 
	double VoltageAmp = 0;
	double Amps_Now = 0;
	VoltageAmp = (RawValueAmp / 1024.0) * 5000; // Gets you mV
	Amps_Now =  ((VoltageAmp - ACSoffset) / mVperAmp);
	Amps = Amps_Now;
	
	//Serial.print(F("A:"));    
	//Serial.print(Amps);
	//Serial.print(F("|"));
	
	
	// Calculate Voltage from NANO RX Data
	
	if (RawValueVolt > 100)  {
		float vout = 0.0;
		float R1 = 30000;      // JDP using 24V = 30000 (24V)   Mower LAM = 30000
		//float R2 = 7000;       // Mower 330 = 7000     
		float R2 = 5929;       // JDP using 24V = 5929 (24V)
		vout = (RawValueVolt * 5.0) / 1024.0; // see text
		Volts = vout / (R2/(R1+R2));
		Volts_Last = Volts;
		Zero_Volts = 0;
	}